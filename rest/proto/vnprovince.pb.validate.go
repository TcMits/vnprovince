// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: rest/proto/vnprovince.proto

package proto

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Division with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Division) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Division with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DivisionMultiError, or nil
// if none found.
func (m *Division) ValidateAll() error {
	return m.validate(true)
}

func (m *Division) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Id

	// no validation rules for ProvinceCode

	// no validation rules for DistrictCode

	// no validation rules for WardCode

	// no validation rules for ProvinceName

	// no validation rules for DistrictName

	// no validation rules for WardName

	if len(errors) > 0 {
		return DivisionMultiError(errors)
	}

	return nil
}

// DivisionMultiError is an error wrapping multiple validation errors returned
// by Division.ValidateAll() if the designated constraints aren't met.
type DivisionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DivisionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DivisionMultiError) AllErrors() []error { return m }

// DivisionValidationError is the validation error returned by
// Division.Validate if the designated constraints aren't met.
type DivisionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DivisionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DivisionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DivisionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DivisionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DivisionValidationError) ErrorName() string { return "DivisionValidationError" }

// Error satisfies the builtin error interface
func (e DivisionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDivision.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DivisionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DivisionValidationError{}

// Validate checks the field values on ListDivisionsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListDivisionsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDivisionsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListDivisionsRequestMultiError, or nil if none found.
func (m *ListDivisionsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDivisionsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if val := m.GetPageSize(); val < 0 || val > 500 {
		err := ListDivisionsRequestValidationError{
			field:  "PageSize",
			reason: "value must be inside range [0, 500]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPageToken() != "" {
		if _, err := url.Parse(m.GetPageToken()); err != nil {
			err = ListDivisionsRequestValidationError{
				field:  "PageToken",
				reason: "value must be a valid URI",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
	}

	// no validation rules for Filter

	if m.GetSkip() < 0 {
		err := ListDivisionsRequestValidationError{
			field:  "Skip",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListDivisionsRequestMultiError(errors)
	}

	return nil
}

// ListDivisionsRequestMultiError is an error wrapping multiple validation
// errors returned by ListDivisionsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListDivisionsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDivisionsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDivisionsRequestMultiError) AllErrors() []error { return m }

// ListDivisionsRequestValidationError is the validation error returned by
// ListDivisionsRequest.Validate if the designated constraints aren't met.
type ListDivisionsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDivisionsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDivisionsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDivisionsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDivisionsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDivisionsRequestValidationError) ErrorName() string {
	return "ListDivisionsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListDivisionsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDivisionsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDivisionsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDivisionsRequestValidationError{}

// Validate checks the field values on ListDivisionsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListDivisionsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDivisionsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListDivisionsResponseMultiError, or nil if none found.
func (m *ListDivisionsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDivisionsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetDivisions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListDivisionsResponseValidationError{
						field:  fmt.Sprintf("Divisions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListDivisionsResponseValidationError{
						field:  fmt.Sprintf("Divisions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListDivisionsResponseValidationError{
					field:  fmt.Sprintf("Divisions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	if len(errors) > 0 {
		return ListDivisionsResponseMultiError(errors)
	}

	return nil
}

// ListDivisionsResponseMultiError is an error wrapping multiple validation
// errors returned by ListDivisionsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListDivisionsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDivisionsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDivisionsResponseMultiError) AllErrors() []error { return m }

// ListDivisionsResponseValidationError is the validation error returned by
// ListDivisionsResponse.Validate if the designated constraints aren't met.
type ListDivisionsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDivisionsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDivisionsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDivisionsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDivisionsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDivisionsResponseValidationError) ErrorName() string {
	return "ListDivisionsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListDivisionsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDivisionsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDivisionsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDivisionsResponseValidationError{}

// Validate checks the field values on GetDivisionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDivisionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDivisionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDivisionRequestMultiError, or nil if none found.
func (m *GetDivisionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDivisionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(errors) > 0 {
		return GetDivisionRequestMultiError(errors)
	}

	return nil
}

// GetDivisionRequestMultiError is an error wrapping multiple validation errors
// returned by GetDivisionRequest.ValidateAll() if the designated constraints
// aren't met.
type GetDivisionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDivisionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDivisionRequestMultiError) AllErrors() []error { return m }

// GetDivisionRequestValidationError is the validation error returned by
// GetDivisionRequest.Validate if the designated constraints aren't met.
type GetDivisionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDivisionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDivisionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDivisionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDivisionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDivisionRequestValidationError) ErrorName() string {
	return "GetDivisionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetDivisionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDivisionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDivisionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDivisionRequestValidationError{}
