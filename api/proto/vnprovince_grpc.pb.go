// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: api/proto/vnprovince.proto

package proto

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// VNProvinceServiceClient is the client API for VNProvinceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VNProvinceServiceClient interface {
	ListDivisions(ctx context.Context, in *ListDivisionsRequest, opts ...grpc.CallOption) (*ListDivisionsResponse, error)
	GetDivision(ctx context.Context, in *GetDivisionRequest, opts ...grpc.CallOption) (*Division, error)
}

type vNProvinceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVNProvinceServiceClient(cc grpc.ClientConnInterface) VNProvinceServiceClient {
	return &vNProvinceServiceClient{cc}
}

func (c *vNProvinceServiceClient) ListDivisions(ctx context.Context, in *ListDivisionsRequest, opts ...grpc.CallOption) (*ListDivisionsResponse, error) {
	out := new(ListDivisionsResponse)
	err := c.cc.Invoke(ctx, "/api.proto.VNProvinceService/ListDivisions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vNProvinceServiceClient) GetDivision(ctx context.Context, in *GetDivisionRequest, opts ...grpc.CallOption) (*Division, error) {
	out := new(Division)
	err := c.cc.Invoke(ctx, "/api.proto.VNProvinceService/GetDivision", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VNProvinceServiceServer is the server API for VNProvinceService service.
// All implementations must embed UnimplementedVNProvinceServiceServer
// for forward compatibility
type VNProvinceServiceServer interface {
	ListDivisions(context.Context, *ListDivisionsRequest) (*ListDivisionsResponse, error)
	GetDivision(context.Context, *GetDivisionRequest) (*Division, error)
	mustEmbedUnimplementedVNProvinceServiceServer()
}

// UnimplementedVNProvinceServiceServer must be embedded to have forward compatible implementations.
type UnimplementedVNProvinceServiceServer struct{}

func (UnimplementedVNProvinceServiceServer) ListDivisions(context.Context, *ListDivisionsRequest) (*ListDivisionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDivisions not implemented")
}

func (UnimplementedVNProvinceServiceServer) GetDivision(context.Context, *GetDivisionRequest) (*Division, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDivision not implemented")
}
func (UnimplementedVNProvinceServiceServer) mustEmbedUnimplementedVNProvinceServiceServer() {}

// UnsafeVNProvinceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VNProvinceServiceServer will
// result in compilation errors.
type UnsafeVNProvinceServiceServer interface {
	mustEmbedUnimplementedVNProvinceServiceServer()
}

func RegisterVNProvinceServiceServer(s grpc.ServiceRegistrar, srv VNProvinceServiceServer) {
	s.RegisterService(&VNProvinceService_ServiceDesc, srv)
}

func _VNProvinceService_ListDivisions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDivisionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VNProvinceServiceServer).ListDivisions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.proto.VNProvinceService/ListDivisions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VNProvinceServiceServer).ListDivisions(ctx, req.(*ListDivisionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VNProvinceService_GetDivision_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDivisionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VNProvinceServiceServer).GetDivision(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.proto.VNProvinceService/GetDivision",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VNProvinceServiceServer).GetDivision(ctx, req.(*GetDivisionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// VNProvinceService_ServiceDesc is the grpc.ServiceDesc for VNProvinceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VNProvinceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.proto.VNProvinceService",
	HandlerType: (*VNProvinceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListDivisions",
			Handler:    _VNProvinceService_ListDivisions_Handler,
		},
		{
			MethodName: "GetDivision",
			Handler:    _VNProvinceService_GetDivision_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/proto/vnprovince.proto",
}
